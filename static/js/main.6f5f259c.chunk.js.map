{"version":3,"sources":["Coin.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Coin","src","this","props","info","imgSrc","alt","side","Component","defaultProps","image","Game","state","attempts","totalHeads","totalTails","coinFace","handleClick","bind","flipCoin","newCoin","coins","Math","floor","random","setState","st","result","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAEMA,E,uKAMF,OACE,6BACE,yBAAKC,IAAKC,KAAKC,MAAMC,KAAKC,OAAQC,IAAKJ,KAAKC,MAAMC,KAAKG,Y,GAR5CC,aAAbR,EACGS,aAAe,CACpBC,MAAO,uDAYIV,Q,cCbMW,E,kDACjB,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IACDS,MAAQ,CACTC,SAAU,EACVC,WAAY,EACZC,WAAY,EACZC,SAAU,MAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARJ,E,0DAefhB,KAAKiB,a,iCAGL,IAAIC,EAAUlB,KAAKC,MAAMkB,MAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,WAC/CtB,KAAKuB,UAAS,SAAAC,GACV,OAAO,2BACAA,GADP,IAEIV,SAAUI,EACVP,SAAUa,EAAGb,SAAW,EACxBC,WAAYY,EAAGZ,YAA+B,SAAjBM,EAAQb,KAAkB,EAAI,GAC3DQ,WAAYW,EAAGX,YAA+B,SAAjBK,EAAQb,KAAkB,EAAI,U,+BAKnE,IAAIoB,EAAM,iBAAazB,KAAKU,MAAMC,SAAxB,kCAA0DX,KAAKU,MAAME,WAArE,sBAA6FZ,KAAKU,MAAMG,WAAxG,WACV,OACI,6BACI,qDAEAb,KAAKU,MAAMI,UAAa,kBAAC,EAAD,CAAMZ,KAAMF,KAAKU,MAAMI,WAG/C,4BAAQY,QAAW1B,KAAKe,aAAxB,cAGA,2BAAIU,Q,GA1CcnB,aAAbG,EAWVF,aAAe,CAClBY,MAAO,CAAC,CAACd,KAAK,OAAQF,OAAQ,uDACtB,CAACE,KAAM,OAAQF,OAAQ,oDCFxBwB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6f5f259c.chunk.js","sourcesContent":["import React, {Component} from 'react'\n// https://i.colnect.net/f/1177/395/25_Pounds.jpg\nclass Coin extends Component {\n  static defaultProps = {\n    image: 'https://i.colnect.net/f/1177/396/25-Pounds-back.jpg'\n  }\n  render() {\n\n    return (\n      <div>\n        <img src={this.props.info.imgSrc} alt={this.props.info.side}/>\n      </div>\n    )\n  }\n}\n\nexport default Coin","import React, { Component } from 'react'\nimport Coin from './Coin';\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            attempts: 0,\n            totalHeads: 0,\n            totalTails: 0,\n            coinFace: null,\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n    static defaultProps = {\n        coins: [{side:'Head', imgSrc: 'https://i.colnect.net/f/1177/396/25-Pounds-back.jpg'},\n                {side: 'Tail', imgSrc: 'https://i.colnect.net/f/1177/395/25_Pounds.jpg'}]\n    }\n    handleClick() {\n        this.flipCoin();\n    }\n    flipCoin() {\n        let newCoin = this.props.coins[Math.floor(Math.random() * 2)];\n        this.setState(st => {\n            return {\n                ...st,\n                coinFace: newCoin,\n                attempts: st.attempts + 1,\n                totalHeads: st.totalHeads + (newCoin.side === 'Head' ? 1 : 0),\n                totalTails: st.totalTails + (newCoin.side === 'Tail' ? 1 : 0),\n            }\n        });\n    }\n    render() {\n        let result = `Out of ${this.state.attempts} flips,there have been ${this.state.totalHeads} heads and ${this.state.totalTails} tails.`\n        return (\n            <div>\n                <h1>Let's flip a coin!!!!</h1>\n\n               {this.state.coinFace &&  <Coin info={this.state.coinFace}/>}\n\n\n                <button onClick = {this.handleClick}>Flip ME!!!</button>\n\n\n                <p>{result}</p>\n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nimport './App.css';\nimport Coin from './Coin';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}